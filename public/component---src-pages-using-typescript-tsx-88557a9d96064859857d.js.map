{"version":3,"sources":["webpack:///./src/pages/using-typescript.tsx","webpack:///./src/components/seo.js"],"names":["UsingTypescript","data","path","title","site","buildTime","href","to","query","SEO","description","lang","meta","metaImage","image","pathname","useStaticQuery","metaDescription","siteMetadata","src","siteUrl","canonical","htmlAttributes","titleTemplate","link","rel","name","content","keywords","property","author","concat","itemprop","width","height","defaultProps"],"mappings":"8FAAA,0GAyBeA,UAZyC,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACtD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,qBACX,sEACA,uEAA4C,wCAA5C,+DAAyH,2CAAzH,wEACA,uEAA4C,0CAA5C,oBAAgF,0CAAhF,gBAAgH,yCAAhH,UACA,6DAAkCD,EAAlC,wBAA6DD,EAAKG,KAAKC,UAAvE,KACA,8DAAmC,uBAAGC,KAAK,6CAAR,kCAAnC,KACA,kBAAC,OAAD,CAAMC,GAAG,KAAT,6BAMG,IAAMC,EAAQ,c,kCC3BrB,iDAKA,SAASC,EAAT,GAA8E,IAA/DC,EAA8D,EAA9DA,YAAaC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,KAAaC,EAA8B,EAArCC,MAAkBX,EAAmB,EAAnBA,MAAOY,EAAY,EAAZA,SACvDX,EAASY,yBAAe,cAAxBZ,KAgBFa,EAAkBP,GAAeN,EAAKc,aAAaR,YACnDI,EACJD,GAAaA,EAAUM,IAAvB,GACOf,EAAKc,aAAaE,QAAUP,EAAUM,IACzC,KACAE,EAAYN,EAAQ,GAAMX,EAAKc,aAAaE,QAAUL,EAAa,KAEzE,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdX,QAEFR,MAAOA,EACPoB,cAAa,QAAUnB,EAAKc,aAAaf,MACzCqB,KACEH,EACI,CACE,CACEI,IAAK,YACLnB,KAAMe,IAGV,GAENT,KAAM,CACJ,CACEc,KAAK,cACLC,QAASV,GAEX,CACES,KAAM,WACNC,QAASvB,EAAKc,aAAaU,UAE7B,CACEC,SAAS,WACTF,QAASxB,GAEX,CACE0B,SAAS,iBACTF,QAASV,GAEX,CACEY,SAAS,UACTF,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASvB,EAAKc,aAAaY,QAE7B,CACEJ,KAAK,gBACLC,QAASxB,GAEX,CACEuB,KAAK,sBACLC,QAASV,IAGVc,OACClB,EACI,CACE,CACEgB,SAAU,WACVG,SAAS,QACTL,QAASb,GAEX,CACEe,SAAU,iBACVF,QAASd,EAAUoB,OAErB,CACEJ,SAAU,kBACVF,QAASd,EAAUqB,QAErB,CACER,KAAM,eACNC,QAAS,wBAGb,CACE,CACED,KAAM,eACNC,QAAS,aAIlBI,OAAOnB,KAKhBH,EAAI0B,aAAe,CACjBxB,KAAK,KACLC,KAAM,GACNF,YAAY,IAgBCD","file":"component---src-pages-using-typescript-tsx-88557a9d96064859857d.js","sourcesContent":["// If you don't want to use TypeScript you can delete this file!\r\nimport React from \"react\"\r\nimport { PageProps, Link, graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\n\r\ntype DataProps = {\r\n  site: {\r\n    buildTime: string\r\n  }\r\n}\r\n\r\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({ data, path }) => (\r\n  <Layout>\r\n    <SEO title=\"Using TypeScript\" />\r\n    <h1>Gatsby supports TypeScript by default!</h1>\r\n    <p>This means that you can create and write <em>.ts/.tsx</em> files for your pages, components etc. Please note that the <em>gatsby-*.js</em> files (like gatsby-node.js) currently don't support TypeScript yet.</p>\r\n    <p>For type checking you'll want to install <em>typescript</em> via npm and run <em>tsc --init</em> to create a <em>.tsconfig</em> file.</p>\r\n    <p>You're currently on the page \"{path}\" which was built on {data.site.buildTime}.</p>\r\n    <p>To learn more, head over to our <a href=\"https://www.gatsbyjs.org/docs/typescript/\">documentation about TypeScript</a>.</p>\r\n    <Link to=\"/\">Go back to the homepage</Link>\r\n  </Layout>\r\n)\r\n\r\nexport default UsingTypescript\r\n\r\nexport const query = graphql`\r\n  {\r\n    site {\r\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\r\n    }\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nfunction SEO({ description, lang, meta, image: metaImage, title, pathname }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n            keywords\r\n            siteUrl\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const image =\r\n    metaImage && metaImage.src\r\n      ? `${site.siteMetadata.siteUrl}${metaImage.src}`\r\n      : null\r\n  const canonical = pathname ? `${site.siteMetadata.siteUrl}${pathname}` : null\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      link={\r\n        canonical\r\n          ? [\r\n              {\r\n                rel: \"canonical\",\r\n                href: canonical,\r\n              },\r\n            ]\r\n          : []\r\n      }\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          name: \"keywords\",\r\n          content: site.siteMetadata.keywords,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ]\r\n        .concat(\r\n          metaImage\r\n            ? [\r\n                {\r\n                  property: \"og:image\",\r\n                  itemprop:\"image\",\r\n                  content: image,\r\n                },\r\n                {\r\n                  property: \"og:image:width\",\r\n                  content: metaImage.width,\r\n                },\r\n                {\r\n                  property: \"og:image:height\",\r\n                  content: metaImage.height,\r\n                },\r\n                {\r\n                  name: \"twitter:card\",\r\n                  content: \"summary_large_image\",\r\n                },\r\n              ]\r\n            : [\r\n                {\r\n                  name: \"twitter:card\",\r\n                  content: \"summary\",\r\n                },\r\n              ]\r\n        )\r\n        .concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n  image: PropTypes.shape({\r\n    src: PropTypes.string.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    width: PropTypes.number.isRequired,\r\n  }),\r\n  pathname: PropTypes.string,\r\n}\r\n\r\nexport default SEO"],"sourceRoot":""}