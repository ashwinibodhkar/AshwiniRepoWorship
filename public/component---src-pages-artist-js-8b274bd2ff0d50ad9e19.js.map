{"version":3,"sources":["webpack:///./src/pages/artist.js","webpack:///./src/components/footer.js","webpack:///./src/components/seo.js"],"names":["ArtistPage","data","title","fluid","className","type","allMarkdownRemark","edges","map","node","lg","to","fields","slug","frontmatter","size","color","ArtistQuery","footer","SEO","description","lang","meta","metaImage","image","pathname","site","useStaticQuery","metaDescription","siteMetadata","src","siteUrl","canonical","htmlAttributes","titleTemplate","link","rel","href","name","content","keywords","property","author","concat","itemprop","width","height","defaultProps"],"mappings":"4FAAA,4KA6DeA,UA/CI,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,EAAOC,MAAP,OAEjB,6BACE,kBAAC,IAAD,CAAKA,MAAM,gBAEX,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAWC,OAAK,EAACC,UAAU,WACzB,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,wBAAIA,UAAU,+BAAd,YAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKA,UAAU,wBACf,wBAAIC,KAAK,OAAOD,UAAU,OACvBH,EAAKK,kBAAkBC,MAAMC,KAAI,gBAAEC,EAAF,EAAEA,KAAF,OAC9B,kBAAC,IAAD,CAAKC,GAAI,EAAGN,UAAU,WACtB,4BAEE,kBAAC,OAAD,CAAMO,GAAIF,EAAKG,OAAOC,MAAOJ,EAAKK,YAAYZ,eAQxD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKE,UAAU,8BACb,2BAAG,kBAAC,OAAD,CAAMO,GAAG,KAAT,iBAA2B,kBAAC,IAAD,CAAWI,KAAM,GAAGC,MAAM,kBAOlE,kBAAC,IAAD,QAaG,IAAMC,EAAW,c,oCCjExB,mFAuBeC,IAlBA,kBAEX,6BACI,kBAAC,IAAD,CAAWf,OAAK,EAACC,UAAU,IACvB,kBAAC,IAAD,CAAKA,UAAU,mCACX,kBAAC,IAAD,CAAKA,UAAU,eACV,mD,yDCXrB,iDAKA,SAASe,EAAT,GAA8E,IAA/DC,EAA8D,EAA9DA,YAAaC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,KAAaC,EAA8B,EAArCC,MAAkBtB,EAAmB,EAAnBA,MAAOuB,EAAY,EAAZA,SACvDC,EAASC,yBAAe,cAAxBD,KAgBFE,EAAkBR,GAAeM,EAAKG,aAAaT,YACnDI,EACJD,GAAaA,EAAUO,IAAvB,GACOJ,EAAKG,aAAaE,QAAUR,EAAUO,IACzC,KACAE,EAAYP,EAAQ,GAAMC,EAAKG,aAAaE,QAAUN,EAAa,KAEzE,OACE,kBAAC,IAAD,CACEQ,eAAgB,CACdZ,QAEFnB,MAAOA,EACPgC,cAAa,QAAUR,EAAKG,aAAa3B,MACzCiC,KACEH,EACI,CACE,CACEI,IAAK,YACLC,KAAML,IAGV,GAENV,KAAM,CACJ,CACEgB,KAAK,cACLC,QAASX,GAEX,CACEU,KAAM,WACNC,QAASb,EAAKG,aAAaW,UAE7B,CACEC,SAAS,WACTF,QAASrC,GAEX,CACEuC,SAAS,iBACTF,QAASX,GAEX,CACEa,SAAS,UACTF,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASb,EAAKG,aAAaa,QAE7B,CACEJ,KAAK,gBACLC,QAASrC,GAEX,CACEoC,KAAK,sBACLC,QAASX,IAGVe,OACCpB,EACI,CACE,CACEkB,SAAU,WACVG,SAAS,QACTL,QAASf,GAEX,CACEiB,SAAU,iBACVF,QAAShB,EAAUsB,OAErB,CACEJ,SAAU,kBACVF,QAAShB,EAAUuB,QAErB,CACER,KAAM,eACNC,QAAS,wBAGb,CACE,CACED,KAAM,eACNC,QAAS,aAIlBI,OAAOrB,KAKhBH,EAAI4B,aAAe,CACjB1B,KAAK,KACLC,KAAM,GACNF,YAAY,IAgBCD","file":"component---src-pages-artist-js-8b274bd2ff0d50ad9e19.js","sourcesContent":["import React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport { Container, Row, Col } from \"react-bootstrap\"\r\nimport Footer from '../components/footer';\r\nimport { FaArrowUp } from \"react-icons/fa\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst ArtistPage = ({data,title}) => (\r\n \r\n  <div>\r\n    <SEO title=\"Artist Page\" />\r\n    {/* */}\r\n    <Layout />\r\n    <Container fluid className=\"catBg  \">           \r\n      <Container>\r\n        <div >\r\n          <Row >\r\n            <Col >\r\n              <h2 className=\"pt-5 text-center text-white\">ARTIST</h2>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"mainCard text-center\">\r\n            <ul type=\"none\" className=\"p-0\">\r\n              {data.allMarkdownRemark.edges.map(({node}) => (\r\n                  <Col lg={3} className=\"catCard\">\r\n                  <li >\r\n                    \r\n                    <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\r\n                  \r\n                  </li>\r\n                  </Col>\r\n                ))}\r\n              </ul>            \r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"backHome text-right pt-5  \">\r\n              <p><Link to=\"/\"> Back to Home <FaArrowUp size={15}color=\"yellow\" ></FaArrowUp></Link></p>\r\n            </Col>\r\n          </Row>\r\n        </div>      \r\n      </Container>\r\n      \r\n    </Container>\r\n    <Footer />\r\n    \r\n\r\n   \r\n  </div>\r\n    \r\n  \r\n)\r\n\r\nexport default ArtistPage\r\n\r\n\r\n\r\nexport const ArtistQuery = graphql`\r\n\r\n  query{\r\n    site{\r\n      siteMetadata{\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(filter: {fileAbsolutePath: {regex: \"/artists/\"}}) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            excerpt\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }      \r\n    }\r\n  }  \r\n`","import React from 'react'\r\nimport \"./footer.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container,Row,Col } from 'react-bootstrap'\r\n//import PushNotifications from './PushNotifications'\r\nconst footer = () => (\r\n    \r\n    <div>\r\n        <Container fluid className=\"\">\r\n            <Row className=\"row align-items-end footer py-3\">\r\n                <Col className=\"text-center\">\r\n                     <p>letsworship.in</p>\r\n                </Col>\r\n                                       \r\n            </Row>\r\n        </Container>\r\n\r\n        {/* <PushNotifications/> */}\r\n    </div>\r\n\r\n)\r\n\r\n\r\nexport default footer","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nfunction SEO({ description, lang, meta, image: metaImage, title, pathname }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n            keywords\r\n            siteUrl\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const image =\r\n    metaImage && metaImage.src\r\n      ? `${site.siteMetadata.siteUrl}${metaImage.src}`\r\n      : null\r\n  const canonical = pathname ? `${site.siteMetadata.siteUrl}${pathname}` : null\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      link={\r\n        canonical\r\n          ? [\r\n              {\r\n                rel: \"canonical\",\r\n                href: canonical,\r\n              },\r\n            ]\r\n          : []\r\n      }\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          name: \"keywords\",\r\n          content: site.siteMetadata.keywords,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ]\r\n        .concat(\r\n          metaImage\r\n            ? [\r\n                {\r\n                  property: \"og:image\",\r\n                  itemprop:\"image\",\r\n                  content: image,\r\n                },\r\n                {\r\n                  property: \"og:image:width\",\r\n                  content: metaImage.width,\r\n                },\r\n                {\r\n                  property: \"og:image:height\",\r\n                  content: metaImage.height,\r\n                },\r\n                {\r\n                  name: \"twitter:card\",\r\n                  content: \"summary_large_image\",\r\n                },\r\n              ]\r\n            : [\r\n                {\r\n                  name: \"twitter:card\",\r\n                  content: \"summary\",\r\n                },\r\n              ]\r\n        )\r\n        .concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n  image: PropTypes.shape({\r\n    src: PropTypes.string.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    width: PropTypes.number.isRequired,\r\n  }),\r\n  pathname: PropTypes.string,\r\n}\r\n\r\nexport default SEO"],"sourceRoot":""}